% Yubikey NEO setup
% Leif Johansson
% 2013-10-01

Yubikey NEO setup
=================

This guide steps you through the process of setting up a YubiKey NEO with the opengpg applet for use with openssh and gpg.

Keys are generated outside the NEO for two reasons:
1) to facilitate backups of the secret key (think loosing your NEO, or upgrading the OpenPGP applet)
2) who knows how good the RNG in the NEO is? http://smartfacts.cr.yp.to/


Add Klas stuff ppa & yubico/stable
----------------------------------

    # sudo add-apt-repository ppa:klali/stuff
    # sudo add-apt-repository ppa:yubico/stable
    # sudo apt-get update

Install ykpersonalize
---------------------

    # sudo apt-get install yubikey-personalization
    
Install Gnupg2
-------------------------

### Mac OS X

Download and install GPGSuite from https://gpgtools.org/

### Ubuntu
    
    # sudo apt-get install gnupg2 gnupg-agent gpgsm pcscd
    
Install Smart card daemon
-------------------------

    # sudo apt-get install scdaemon
    
Add the following to $HOME/.gnupg/gpg-agent.conf. Don't forget to change username and hostname and check the path to scdaemon.

    scdaemon-program /usr/lib/gnupg2/scdaemon
    #
    enable-ssh-support
    # Enable debug logging if needed
    #debug guru
    #log-file /dev/shm/gpg-agent.log
    write-env-file "/home/[username]/.gnupg/gpg-agent-info-[hostname]"

### Mac OS X
Add the following to $HOME/.profile or equivalent.

    export SSH_AUTH_SOCK=/Users/$USER/.gnupg/S.gpg-agent.ssh

### Linux
Add the following to $HOME/.profile or equivalent.

    GNUPGHOME=$HOME/.gnupg
    if [ -f "${GNUPGHOME}/gpg-agent-info-$(hostname)" ]; then
        . "${GNUPGHOME}/gpg-agent-info-$(hostname)"
        export GPG_AGENT_INFO
        export SSH_AUTH_SOCK
        export SSH_AGENT_PID
    fi
    GPG_TTY=$(tty)
    export GPG_TTY

Set yubikey in CCID+HID-mode
----------------------------

From the factory the yubikey is setup only as a standard/classical OTP device. Run the following command to set it in dual HID (keyboard) and CCID mode. Resist the temptation to set it in CCID-only mode - you won't be able to use ykpersonalize again if you do.

    # ykpersonalize -m82

If you failed to resist the temptation of CCID-mode you can expert-mode hack your NEO back to HID mode using this command:

    $ opensc-tool -s '00 a4 04 00 07 a0 00 00 05 27 20 01 01' -s '00 01 11 00'

or, alledgedly, using the ykneomgr application found at http://opensource.yubico.com/libykneomgr/

If you want to use the token in a virtual machine (VMWare Fusion) when running OS X you can't use HID mode.

    # ykpersonalize -m81

Setup user access to the yubikey USB device
-------------------------------------------
This step might not be needed in all cases.

/etc/udev/rules.d/69-yubikey.rules

    ACTION!="add|change", GOTO="yubico_end"

    # Udev rules for letting the console user access the Yubikey USB
    # device node, needed for challenge/response to work correctly.

    # Yubico Yubikey II
    ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0010|0110|0111", \
    ENV{ID_SECURITY_TOKEN}="1"

    LABEL="yubico_end"
    
/etc/udev/rules.d/70-yubikey.rules

    # Udev rules for letting the console user access the Yubikey USB
    # device node, needed for challenge/response to work correctly.

    ACTION=="add|change", SUBSYSTEM=="usb", \
      ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0010|0110|0111", \
      TEST=="/var/run/ConsoleKit/database", \
      RUN+="udev-acl --action=$env{ACTION} --device=$env{DEVNAME}"

Generate key outside card
------------

Create some space in memory you can easily clean out later...

    # umask 077
    # cd /dev/shm
    # mkdir foo
    # cd foo

Make sure gpg2 uses this directory and generate a key using the defaults (a 2048 bit RSA key) and set a 1 year validity.

    # export GNUPGHOME=$PWD
    # gpg2 --gen-key

Next edit the key in expert mode - $id is the id of the key you just created. Add your uid's (adduid).

    # gpg2 --edit-key --expert $id
    gpg> adduid # until done

Now add 1 subkey to be used with SSH.

    gpg> addkey

Pick RSA (set your own capabilities) and toggle S & E & A which should result in only "Authenticate". This is what the result should look like.

    gpg> list


    pub  2048R/662D4043  created: 2013-10-01  expires: 2014-10-01  usage: SC
                     trust: ultimate      validity: ultimate
    sub  2048R/FED803A7  created: 2013-10-01  expires: 2014-10-01  usage: E
    sub  2048R/4334FEF8  created: 2013-10-01  expires: 2014-10-01  usage: A
    [ unknown] (1)  Leif Johansson <leifj@nordu.net>
    [ unknown] (2)  Leif Johansson <leifj@mnt.se>
    [ unknown] (3). Leif Johansson <leifj@sunet.se>

Remember to save the changes whe you exit edit mode.

You will also need to save your public key somewhere, so you can import it in your real GPG keyring. Something like

    $ gpg2 --armor --export $id > ~/my-NEO-public-key.asc

Generate key on the card
------------------------
This is probably how you generate the key on the yubikey, comments welcome!
    
    $ gpg2 --card-edit
    gpg/card> generate
    # Generate a key using the defaults (a 2048 bit RSA key) and set a 1 year validity.
    gpg/card> list
    
    pub  2048R/662D4043  created: 2013-10-01  expires: 2014-10-01  usage: SC
                     trust: ultimate      validity: ultimate
    sub  2048R/FED803A7  created: 2013-10-01  expires: 2014-10-01  usage: E
    sub  2048R/4334FEF8  created: 2013-10-01  expires: 2014-10-01  usage: A
    [ unknown] (1)  Leif Johansson <leifj@nordu.net>
    [ unknown] (2)  Leif Johansson <leifj@mnt.se>
    [ unknown] (3). Leif Johansson <leifj@sunet.se>
    
You will also need to save your public key somewhere, so you can import it in your real GPG keyring. Something like

    $ gpg2 --armor --export $id > ~/my-NEO-public-key.asc

Extra credit
------------
For extra credit, build your own openpgp applet. Depending on version of your yubikey this step might not be doable.

Clone ykneo-opengpg repo.

    # echo $PWD
    /dev/shm/foo
    # git clone https://github.com/Yubico/ykneo-openpgp

Set APPLET_ID to include your keyID: Edit build.xml and change APPLET_AID to end in 0xFF:0x00:[your key]:0x00:0x00. The 0xFF bit is to use an unmanaged range.

Example with the key above would be (key id 662D4043),

    <property name="APPLET_AID" value="0xd2:0x76:0x00:0x01:0x24:0x01:0x02:0x00:0xFF:0x00:0x66:0x2D:0x40:0x43:0x00:0x00" />

Follow the README file in ykneo-openpgp (that just just cloned from github) to download java card kit 2.2.2 and build using ant. Next install using the following command:

```
gpshell gpinstall.txt
```

You'll need gpshell which is part of the gpshell package.


Write key to card
-----------------

The best way to get the secret key installed in the NEO is to use GPG >= 2.0.22. Really.

    # gpg2 --edit-key $id
    gpg> toggle
    gpg> keytocard
    gpg> key 1
    gpg> keytocard
    gpg> key 1
    gpg> key 2
    gpg> keytocard
    
During this stage it is very important that only a gpg-agent with version >=2.0.22 is running. If you get errors like

    gpg: error writing key to card: Not supported
    
it is probably not the right gpg-agent that is currently running. Kill any gpg-agent process and look in

    /etc/X11/Xsession.d/90gpg-agent
    
how to restart it with a gpg-agent binary that you are sure is >=2.0.22.


Tidy up before you forget
-------------------------
    
    # cd /dev/shm/foo
    # shred -zun 12 secring.gpg
    # cd ..; rm foo -rf
    

Write key to card - the OLD way
-------------------------------

If you really can't use a new enough version of GPG to write the generated key to the NEO, you can use this hack. You might end up with one or more unusable sub-keys
if you do (probably due to a bug somewhere in keyParser) - verify sign, decrypt and authentication usage after programming.

You're going to be running keyParser to generate opensc-tool commands that is used to programm the applet. This operation is done 3 times. By unsetting HISTFILE you're preventing the key data from winding up in your shell history.

Use passwd to remove the passphrase for the key - you're about to load this onto the yubikey.

    gpg> passwd

keyParser uses openpgp2ssh from the monkeysphere package.

    # sudo apt-get install monkeysphere

    # unset HISTFILE
    # ./keyParser a <A-usage subkey id> 12345678

paste resulting opensc-tool cmdline into shell

    # ./keyParser e <E-usage subkey id> 12345678

paste resulting opensc-tool cmdline into shell

    # ./keyParser s <SC-usage subkey id> 12345678

paste resulting opensc-tool cmdline into shell


Test
----

Lets see what we have...

    # gpg2 --card-status
    gpg: WARNING: unsafe permissions on homedir `/dev/shm/foo'
    gpg: detected reader `Yubico Yubikey NEO OTP+CCID 00 00'
    Application ID ...: D2760001240102000000000000010000
    Version ..........: 2.0
    Manufacturer .....: test card
    Serial number ....: 00000001
    Name of cardholder: [not set]
    Language prefs ...: [not set]
    Sex ..............: unspecified
    URL of public key : [not set]
    Login data .......: [not set]
    Signature PIN ....: forced
    Key attributes ...: 2048R 2048R 2048R
    Max. PIN lengths .: 127 127 127
    PIN retry counter : 3 3 3
    Signature counter : 0
    Signature key ....: F95F 1654 911B 8B21 68A1  EF18 6D13 20C7 662D 4043
    Encryption key....: 609A 2FC8 5606 421D B848  14DF 3EC4 D983 FED8 03A7
    Authentication key: E2A3 D430 532E F05B B37F  1822 966F 771E 4B6F EF82
    General key info..: pub  2048R/662D4043 2013-10-01 Leif Johansson <leifj@sunet.se>
    sec   2048R/662D4043  created: 2013-10-01  expires: 2014-10-01
    ssb   2048R/FED803A7  created: 2013-10-01  expires: 2014-10-01
    ssb   2048R/4B6FEF82  created: 2013-10-01  expires: 2014-10-01


SSH
---

    # cat .gnupg/gpg-agent.conf
    default-cache-ttl 3600
    enable-ssh-support
    log-file /tmp/gpg-agent.log
    debug guru
